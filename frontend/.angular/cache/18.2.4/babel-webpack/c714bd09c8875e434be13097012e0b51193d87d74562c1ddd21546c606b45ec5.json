{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/telemetry.service\";\nimport * as i2 from \"@angular/common\";\nfunction TelemetryMonitorComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.sensor);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r1.value);\n  }\n}\nexport class TelemetryMonitorComponent {\n  constructor(telemetryService) {\n    this.telemetryService = telemetryService;\n    this.telemetryStatus = [];\n  }\n  ngOnInit() {\n    this.getTelemetryStatus();\n  }\n  getTelemetryStatus() {\n    this.telemetryService.getTelemetryStatus().subscribe(status => this.telemetryStatus = status, error => console.error('Error getting telemetry status:', error));\n  }\n  static #_ = this.ɵfac = function TelemetryMonitorComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TelemetryMonitorComponent)(i0.ɵɵdirectiveInject(i1.TelemetryService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TelemetryMonitorComponent,\n    selectors: [[\"app-telemetry-monitor\"]],\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"telemetry-monitor\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function TelemetryMonitorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Telemetry Monitor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TelemetryMonitorComponent_Template_button_click_3_listener() {\n          return ctx.getTelemetryStatus();\n        });\n        i0.ɵɵtext(4, \"Refresh\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"table\")(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Sensor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Value\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"tbody\");\n        i0.ɵɵtemplate(13, TelemetryMonitorComponent_tr_13_Template, 5, 2, \"tr\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.telemetryStatus);\n      }\n    },\n    dependencies: [i2.NgForOf],\n    styles: [\".telemetry-monitor[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border-collapse: collapse;\\n}\\n\\nth[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n  text-align: left;\\n}\\n\\nth[_ngcontent-%COMP%] {\\n  background-color: #f0f0f0;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90ZWxlbWV0cnktbW9uaXRvci90ZWxlbWV0cnktbW9uaXRvci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsV0FBVztFQUNYLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2IsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiLnRlbGVtZXRyeS1tb25pdG9yIHtcbiAgcGFkZGluZzogMjBweDtcbn1cblxudGFibGUge1xuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbn1cblxudGgsIHRkIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgcGFkZGluZzogMTBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxudGgge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","item_r1","sensor","value","TelemetryMonitorComponent","constructor","telemetryService","telemetryStatus","ngOnInit","getTelemetryStatus","subscribe","status","error","console","_","ɵɵdirectiveInject","i1","TelemetryService","_2","selectors","decls","vars","consts","template","TelemetryMonitorComponent_Template","rf","ctx","ɵɵlistener","TelemetryMonitorComponent_Template_button_click_3_listener","ɵɵtemplate","TelemetryMonitorComponent_tr_13_Template","ɵɵproperty"],"sources":["/home/runner/IoT-Logic-engine/frontend/src/app/components/telemetry-monitor/telemetry-monitor.component.ts","/home/runner/IoT-Logic-engine/frontend/src/app/components/telemetry-monitor/telemetry-monitor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TelemetryService } from '../../services/telemetry.service';\n\n@Component({\n  selector: 'app-telemetry-monitor',\n  templateUrl: './telemetry-monitor.component.html',\n  styleUrls: ['./telemetry-monitor.component.css']\n})\nexport class TelemetryMonitorComponent implements OnInit {\n  telemetryStatus: any[] = [];\n\n  constructor(private telemetryService: TelemetryService) {}\n\n  ngOnInit() {\n    this.getTelemetryStatus();\n  }\n\n  getTelemetryStatus() {\n    this.telemetryService.getTelemetryStatus().subscribe(\n      (status) => this.telemetryStatus = status,\n      (error) => console.error('Error getting telemetry status:', error)\n    );\n  }\n}\n","<div class=\"telemetry-monitor\">\n  <h2>Telemetry Monitor</h2>\n  <button (click)=\"getTelemetryStatus()\">Refresh</button>\n  <table>\n    <thead>\n      <tr>\n        <th>Sensor</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let item of telemetryStatus\">\n        <td>{{item.sensor}}</td>\n        <td>{{item.value}}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n"],"mappings":";;;;;ICYQA,EADF,CAAAC,cAAA,SAAyC,SACnC;IAAAD,EAAA,CAAAE,MAAA,GAAe;IAAAF,EAAA,CAAAG,YAAA,EAAK;IACxBH,EAAA,CAAAC,cAAA,SAAI;IAAAD,EAAA,CAAAE,MAAA,GAAc;IACpBF,EADoB,CAAAG,YAAA,EAAK,EACpB;;;;IAFCH,EAAA,CAAAI,SAAA,GAAe;IAAfJ,EAAA,CAAAK,iBAAA,CAAAC,OAAA,CAAAC,MAAA,CAAe;IACfP,EAAA,CAAAI,SAAA,GAAc;IAAdJ,EAAA,CAAAK,iBAAA,CAAAC,OAAA,CAAAE,KAAA,CAAc;;;ADL1B,OAAM,MAAOC,yBAAyB;EAGpCC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IAFpC,KAAAC,eAAe,GAAU,EAAE;EAE8B;EAEzDC,QAAQA,CAAA;IACN,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkBA,CAAA;IAChB,IAAI,CAACH,gBAAgB,CAACG,kBAAkB,EAAE,CAACC,SAAS,CACjDC,MAAM,IAAK,IAAI,CAACJ,eAAe,GAAGI,MAAM,EACxCC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC,CACnE;EACH;EAAC,QAAAE,CAAA,G;qCAdUV,yBAAyB,EAAAT,EAAA,CAAAoB,iBAAA,CAAAC,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAzBd,yBAAyB;IAAAe,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,mCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCPpC9B,EADF,CAAAC,cAAA,aAA+B,SACzB;QAAAD,EAAA,CAAAE,MAAA,wBAAiB;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAC1BH,EAAA,CAAAC,cAAA,gBAAuC;QAA/BD,EAAA,CAAAgC,UAAA,mBAAAC,2DAAA;UAAA,OAASF,GAAA,CAAAjB,kBAAA,EAAoB;QAAA,EAAC;QAACd,EAAA,CAAAE,MAAA,cAAO;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAIjDH,EAHN,CAAAC,cAAA,YAAO,YACE,SACD,SACE;QAAAD,EAAA,CAAAE,MAAA,aAAM;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACfH,EAAA,CAAAC,cAAA,UAAI;QAAAD,EAAA,CAAAE,MAAA,aAAK;QAEbF,EAFa,CAAAG,YAAA,EAAK,EACX,EACC;QACRH,EAAA,CAAAC,cAAA,aAAO;QACLD,EAAA,CAAAkC,UAAA,KAAAC,wCAAA,gBAAyC;QAM/CnC,EAFI,CAAAG,YAAA,EAAQ,EACF,EACJ;;;QANqBH,EAAA,CAAAI,SAAA,IAAkB;QAAlBJ,EAAA,CAAAoC,UAAA,YAAAL,GAAA,CAAAnB,eAAA,CAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}